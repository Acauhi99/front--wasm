@page "/register"
@using front__wasm.Services
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="min-h-screen flex items-center justify-center bg-[#11110c] py-12 px-4 sm:px-6 lg:px-8">
  <div class="max-w-md w-full space-y-8 bg-[#1e1e18] p-8 rounded-lg shadow-lg">
    <div>
      <img class="mx-auto h-20 w-auto" src="images/wowahlogo.png" alt="Logo">
      <h2 class="mt-6 text-center text-3xl font-extrabold text-white">Register</h2>
    </div>

    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="mt-8 space-y-6">
      <DataAnnotationsValidator />
      <ValidationSummary class="text-red-500" />

      @if (errorMessage != null)
      {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <span class="block sm:inline">@errorMessage</span>
        </div>
      }

      <div>
        <label for="name" class="block text-sm font-medium text-gray-300">Full Name</label>
        <div class="mt-1">
          <InputText id="name" @bind-Value="registerModel.Name" autocomplete="name" required
            class="appearance-none block w-full px-3 py-2 border border-gray-600 rounded-md shadow-sm bg-[#2a2a24] text-white placeholder-gray-400 focus:outline-none focus:ring-[#f1c533] focus:border-[#f1c533]" />
        </div>
        <ValidationMessage For="@(() => registerModel.Name)" class="text-red-500" />
      </div>

      <div>
        <label for="email" class="block text-sm font-medium text-gray-300">Email</label>
        <div class="mt-1">
          <InputText id="email" @bind-Value="registerModel.Email" type="email" autocomplete="email" required
            class="appearance-none block w-full px-3 py-2 border border-gray-600 rounded-md shadow-sm bg-[#2a2a24] text-white placeholder-gray-400 focus:outline-none focus:ring-[#f1c533] focus:border-[#f1c533]" />
        </div>
        <ValidationMessage For="@(() => registerModel.Email)" class="text-red-500" />
      </div>

      <div>
        <label for="password" class="block text-sm font-medium text-gray-300">Password</label>
        <div class="mt-1">
          <InputText id="password" @bind-Value="registerModel.Password" type="password" autocomplete="new-password"
            required
            class="appearance-none block w-full px-3 py-2 border border-gray-600 rounded-md shadow-sm bg-[#2a2a24] text-white placeholder-gray-400 focus:outline-none focus:ring-[#f1c533] focus:border-[#f1c533]" />
        </div>
        <ValidationMessage For="@(() => registerModel.Password)" class="text-red-500" />
      </div>

      <div>
        <label for="confirmPassword" class="block text-sm font-medium text-gray-300">Confirm Password</label>
        <div class="mt-1">
          <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" type="password"
            autocomplete="new-password" required
            class="appearance-none block w-full px-3 py-2 border border-gray-600 rounded-md shadow-sm bg-[#2a2a24] text-white placeholder-gray-400 focus:outline-none focus:ring-[#f1c533] focus:border-[#f1c533]" />
        </div>
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-red-500" />
      </div>

      <div>
        <button type="submit"
          class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-black bg-[#f1c533] hover:bg-[#ddb326] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#f1c533]">
          @if (isLoading)
          {
            <div class="animate-spin h-5 w-5 mr-3 border-t-2 border-b-2 border-black rounded-full"></div>
          }
          Register
        </button>
      </div>

      <div class="text-sm text-center">
        <a href="/login" class="font-medium text-[#f1c533] hover:text-[#ddb326]">
          Already have an account? Log in here
        </a>
      </div>
    </EditForm>
  </div>
</div>

@code {
  private RegisterViewModel registerModel = new();
  private bool isLoading = false;
  private string? errorMessage;

  private async Task HandleRegister()
  {
    if (registerModel.Password != registerModel.ConfirmPassword)
    {
      errorMessage = "Passwords do not match";
      return;
    }

    errorMessage = null;
    isLoading = true;

    try
    {
      var registerRequest = new RegisterModel
      {
        Name = registerModel.Name,
        Email = registerModel.Email,
        Password = registerModel.Password
      };

      var result = await AuthService.RegisterAsync(registerRequest);

      if (result)
      {
        await JSRuntime.InvokeVoidAsync("alert", "Registration successful! Please log in.");
        NavigationManager.NavigateTo("/login");
      }
      else
      {
        errorMessage = "Registration failed. Email might already be in use.";
      }
    }
    catch (Exception ex)
    {
      errorMessage = $"An error occurred: {ex.Message}";
    }

    isLoading = false;
  }

  public class RegisterViewModel
  {
    [Required(ErrorMessage = "Name is required")]
    [StringLength(100, ErrorMessage = "Name must be between 2 and 100 characters", MinimumLength = 2)]
    public string Name { get; set; } = string.Empty;

    [Required(ErrorMessage = "Email is required")]
    [EmailAddress(ErrorMessage = "Invalid email format")]
    public string Email { get; set; } = string.Empty;

    [Required(ErrorMessage = "Password is required")]
    [StringLength(100, ErrorMessage = "Password must be at least 6 characters long", MinimumLength = 6)]
    public string Password { get; set; } = string.Empty;

    [Required(ErrorMessage = "Password confirmation is required")]
    [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
    public string ConfirmPassword { get; set; } = string.Empty;
  }
}